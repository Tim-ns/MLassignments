
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
import tensorflow as tf
from scipy import stats


raw_train_data = pd.read_csv("X_train.csv")
raw_train_data['Observation_Id'] = np.repeat(np.arange(5000), 257)

new_array = raw_train_data.to_numpy(dtype=np.float32)
raw_train_data_array = new_array.reshape((5000, 257, 15))



avg1_raw = [[]]
avg2_raw = [[]]
avg3_raw = [[]]

avg1_x_raw = [] 
avg1_y_raw = [] 
avg2_x_raw = [] 
avg2_y_raw = [] 
avg3_x_raw = [] 
avg3_y_raw = []


for single_obs in range(raw_train_data_array.shape[0]):
    obs = pd.DataFrame(raw_train_data_array[single_obs])

    avg1_raw.append([obs.iloc[:, 3].mean(), obs.iloc[:, 4].mean()])
    avg2_raw.append([obs.iloc[:, 7].mean(), obs.iloc[:, 8].mean()])
    avg3_raw.append([obs.iloc[:, 11].mean(), obs.iloc[:, 12].mean()])

    avg1_x_raw.append(obs.iloc[:, 3].mean())
    avg1_y_raw.append(obs.iloc[:, 4].mean())
    avg2_x_raw.append(obs.iloc[:, 7].mean())
    avg2_y_raw.append(obs.iloc[:, 8].mean())
    avg3_x_raw.append(obs.iloc[:, 11].mean())
    avg3_y_raw.append(obs.iloc[:, 12].mean())


avg1_raw.pop(0)
avg2_raw.pop(0)
avg3_raw.pop(0)

avg1_x_raw.pop(0)
avg1_y_raw.pop(0)
avg2_x_raw.pop(0)
avg2_y_raw.pop(0)
avg3_x_raw.pop(0)
avg3_y_raw.pop(0)

#Find and remove observations with 0 mean

def find_empty(in_list):
    id = 0
    ids_empty = []
    for element in range(len(in_list)):
        if in_list[element][0] == 0 and in_list[element][1] == 0:  
            ids_empty.append(id)
        id += 1 
    return(ids_empty)

def count_diff(list_1, list_2, list_3):
    count_diff = 0
    for el in range(len(max(list_1, list_2, list_3))):
        if list_1[el] != list_2[el] or list_1[el] != list_3[el] or list_2[el] != list_3[el]:
            count_diff += 1
    return(count_diff)    

print("Number of observations with <V_1> = 0: ", len(find_empty(avg1_raw)))
print(find_empty(avg1_raw))
print("\nNumber of observations with <V_2> = 0: ", len(find_empty(avg2_raw)))
print(find_empty(avg2_raw))
print("\nNumber of observations with <V_3> = 0: ", len(find_empty(avg3_raw)))
print(find_empty(avg3_raw))
print("\nLists of <V_1>, <V_2>, <V_3> differ by: ", count_diff(find_empty(avg1_raw), find_empty(avg2_raw), find_empty(avg3_raw)), " elements. ")



train_data_cleaned_s1 = np.delete(raw_train_data_array, find_empty(avg1_raw), axis=0)

# Remove all rows with zero columns

obs_list = []
for i in range(train_data_cleaned_s1.shape[0]):
    obs = train_data_cleaned_s1[i]

    obs_list.append(train_data_cleaned_s1[i][np.any(obs[:, :-2] != 0.0, axis=1)])
train_data_cleaned_s2 = np.array(obs_list, dtype=object)

# Recalculate mean, std, z-score for every observation


avg1 = [[]]
avg2 = [[]]
avg3 = [[]]

avg1_x = [] 
avg1_y = [] 
avg2_x = [] 
avg2_y = [] 
avg3_x = [] 
avg3_y = []

z1 = [[]]
z2 = [[]]
z3 = [[]]

std1 = [[]]
std2 = [[]]
std3 = [[]]



for single_obs in range(train_data_cleaned_s2.shape[0]):
    obs = pd.DataFrame(train_data_cleaned_s2[single_obs])

    avg1.append([obs.iloc[:, 3].mean(), obs.iloc[:, 4].mean()])
    avg2.append([obs.iloc[:, 7].mean(), obs.iloc[:, 8].mean()])
    avg3.append([obs.iloc[:, 11].mean(), obs.iloc[:, 12].mean()])

    avg1_x.append(obs.iloc[:, 3].mean())
    avg1_y.append(obs.iloc[:, 4].mean())
    avg2_x.append(obs.iloc[:, 7].mean())
    avg2_y.append(obs.iloc[:, 8].mean())
    avg3_x.append(obs.iloc[:, 11].mean())
    avg3_y.append(obs.iloc[:, 12].mean())

    std1.append([obs.iloc[:, 3].std(), obs.iloc[:, 4].std()])
    std2.append([obs.iloc[:, 7].std(), obs.iloc[:, 8].std()])
    std3.append([obs.iloc[:, 11].std(), obs.iloc[:, 12].std()])
    
    z1.append([stats.zscore(obs.iloc[:, 3]).tolist(), stats.zscore(obs.iloc[:, 4]).tolist()])
    z2.append([stats.zscore(obs.iloc[:, 7]).tolist(), stats.zscore(obs.iloc[:, 8]).tolist()])
    z3.append([stats.zscore(obs.iloc[:, 11]).tolist(), stats.zscore(obs.iloc[:, 12]).tolist()])

avg1.pop(0)
avg2.pop(0)
avg3.pop(0)

avg1_x.pop(0)
avg1_y.pop(0)
avg2_x.pop(0)
avg2_y.pop(0)
avg3_x.pop(0)
avg3_y.pop(0)

std1.pop(0)
std2.pop(0)
std3.pop(0)

z1.pop(0)
z2.pop(0)
z3.pop(0)

# Shuffle the dataset
np.random.shuffle(train_data_cleaned_s2)

# save train_data_cleaned_s2 as .npy files
np.save("X_train.npy", train_data_cleaned_s2)


